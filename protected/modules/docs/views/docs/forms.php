#Формы

[id]: <http://example.com/> "А здесь необязательный заголовок"

###Готовые виджеты

- **alias** - Добавляет disabled поле в форму, автоматически заполняемую транслитерированным текстом
    из поля $source, перед этим текст из поля `source`. Нетекстовые символы и прочий мусор удаляются
    Обязательный параметр `source` - имя атрибута источника.

- **editor** - редактор основных текстов

- **MetaTags** - набор полей для описания title, keywords, descriptions

- **file_uploader** - файловый менеджер. Пример использования:
~~~
[php]
'files' => array(
    'type'      => 'file_uploader',
    'tag'       => 'file', //одна модель может использовать несколько загрузчикоф файлов, различая их по этому значению
    'data_type' => 'any',  //Какие файлы разрешено загружать. Доступные значения: document, image, sound, video, any(по-умолчанию)
    'title' => 'Файлы для скачивания'
)
~~~

- **autocomplete** - UI.Autocomplete

- **multi_autocomplete** - обертка над UI.Autocomplete позволяющая выбирать несколько элементов.
    Удобно использовать для редактирования Many_Many связей

- **multi_select** - Аналог multi_autocomplete с более богатым интерфейсом,
    но применяется для небольшого числа элементов.

- **date** - Календарь

- **MaskedTextField** - Основанный на CMaskedTextField, содержит всебе набор предопределенных масок.


###Hint-подсказки
Что бы вывести подсказку для данного атрибута, достаточно в конфигурации формы добавить параметр hint
Пример:
~~~
[php]
'alias' => array(
    'type'   => 'alias',
    'source' => 'title',
    'hint'   => 'Этот параметр будет использован для построения красивого URL.
                 Он генерируется на основании названия, однако до сохранения его можно изменить.
                 После сохранения изменить значение этого поля будет невозможно.'
),
~~~

###Валидация

**Динамические поля**
Очень редко, но бывает необходимо добавить на страницу элемент формы через AJAX.
В таких случаях новое поле не будет проходить валидацию, а точнее не будут отображаться ошибки.
Для решения этой задачи виджет `yiiactiveform` расширен методом `$.fn.yiiactiveform.addFields = function(form, fields)`
Пример использования:
~~~
[javascript]
$.fn.yiiactiveform.addFields($('#category-form'), $(html).find('input[type=text], input[type=checkbox],
                                                                input[type=radio], textarea, select'));
~~~
Эта функция исключает повторы

###Создание своих виджетов для формы

Класс виджета для формы должен наследовать класс `InputWidget` или `JuiInputWidget`

После того как отработает `parent::init();` станут доступны следующие поля:

- Путь до ассетов модуля: `$this->assets`
- Модуль в котором находится видежт: `$this->module`
- Метод `$this->url()` алиас `Yii::app()->controller->createUrl()`
- Модель: `$this->model`
- Атрибут: `$this->name`
- id элемента формы: `$this->id`

